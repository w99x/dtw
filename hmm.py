import numpy as npimport matplotlib.pyplot as pltimport redef read_and_prepare(filenames):    data_arrays = [np.array(map(lambda l: map(float,filter(lambda x: len(x)>0,re.split('\\s+',l))),open(filename))).T for filename in filenames]ira_merged=np.array(map(lambda l: map(float,filter(lambda x: len(x)>0,re.split('\\s+',l))),open('iracsv/merged.csv'))).Tmerged_data=np.array(map(lambda l: map(float, filter(lambda x: len(x) > 0, re.split('\\s+', l))), open('merged.csv'))).Tpattern_data = np.array(map(lambda l: map(float, filter(lambda x: len(x) > 0, re.split('\\s+', l))), open('pattern.csv'))).Tpattern_t, pattern = pattern_data[0, :], pattern_data[1:, :]pattern_t -= pattern_t[0]merged_timet = merged_data[0, :]merged_datat = merged_data[1:, :]#newdatas /= np.max(newdatas)dk = 11#plt.figure()#plt.plot(pattern_t, pattern)#plt.grid()ira_timet = ira_merged[0, :]ira_datat = ira_merged[1:, :]ira_timet += np.max(merged_timet)newdatat = np.concatenate((merged_timet, ira_timet))newdatas =  np.concatenate((merged_datat, ira_datat), axis=1)newpatt, newpats = pattern_t, pattern #interpolate(pattern_t, pattern)pats = reduce(lambda res, x: res + [newpatt, x], newpats, [])#import numpy#np_merged = numpy.matrix(pats).T#numpy.divide(np_merged[:, 0], 1000000000.0, np_merged[:, 0])#numpy.savetxt('pattern.csv', np_merged, fmt='%.10f')plt.figure()plt.plot(*pats)plt.grid()from scipy.spatial.distance import euclideanfrom scipy.signal import argrelextremafrom fastdtw import fastdtw#for x in range(1):x = 0distances = []for i in range(len(newdatat) - dk - 1 - x):    datawin = newdatas[:, i:dk + i + x]    distance, path = fastdtw(pattern, datawin, dist=euclidean)    print distance, path    distances.append(distance)def interpolate_list(xlist, ylist, xnew):    from scipy import interpolate    tck = interpolate.splrep(xlist, ylist, s=0)    ynew = interpolate.splev(xnew, tck, der=0)    return [xnew, ynew.tolist()]extr = argrelextrema(np.array(distances), np.less)extrvals = extr[0]def fiilter_extr(extrspos, values, threshold=0.8):    filtered = [[values[extrspos[0]], None]]    for i in range(len(extrvals) - 1):        last = filtered[-1][0]        if (values[extrspos[i + 1]] - last >= threshold):            filtered[-1][-1] = values[extrvals[i+1]]            filtered.append([values[extrvals[i+1]], None])    return reduce(lambda res, x: res + x, filtered, [])#map(lambda x: values[x], extrspos)#filteredt = fiilter_extr(extrvals, newdatat)minmaxdist = [[-100, 100]] * len(filteredt)plt.figure()plt.plot(range(len(distances)), distances)for extr1 in extrvals:    plt.plot([extr1,extr1], [0, 400], '-r')plt.grid()plt.figure()newdatasarr = reduce(lambda res, x: res + [newdatat, x], newdatas, [])plt.plot(*newdatasarr)for i in range(len(filteredt)):    plt.plot([filteredt[i],filteredt[i]], minmaxdist[i], '-r')plt.grid()plt.show()raw_input()