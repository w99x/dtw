import numpy as npimport matplotlib.pyplot as pltimport redef read_and_prepare(filenames):    data_arrays = []    maxtime = 0    for filename in filenames:        data_array = np.array(map(lambda l: map(float, filter(lambda x: len(x) > 0, re.split('\\s+', l))), open(filename))).T        data_array[0, :] += maxtime        maxtime = np.max(data_array[0, :])        data_arrays.append(data_array)    concated = np.concatenate(data_arrays, axis=1)    return concated[0,:], concated[1:,:]def get_pattern(patternfilename):    pattern_data = np.array(        map(lambda l: map(float, filter(lambda x: len(x) > 0, re.split('\\s+', l))), open(patternfilename))).T    pattern_t, pattern = pattern_data[0, :], pattern_data[1:, :]    pattern_t -= pattern_t[0]    return pattern_t, patternpattern_t, pattern = get_pattern("pattern.csv")dk = len(pattern_t)pats = reduce(lambda res, x: res + [pattern_t, x], pattern, [])for pat in pattern:    plt.figure()    plt.plot(pattern_t, pat)    plt.grid()from scipy.spatial.distance import euclideanfrom scipy.signal import argrelextremafrom fastdtw import fastdtwnewdatat, newdatas = read_and_prepare(['merged.csv',                                       'iracsv/merged.csv',                                       'stasdrivecsv/merged.csv',                                       'stasloopcsv/merged.csv'])def get_dtw_in_window(window, patterns):    pattern_len = len(patterns[0])    windows_len = len(window[0])    distances = []    for i in range(windows_len - pattern_len - 1):        datawin = window[:, i:pattern_len + i]        distance, path = fastdtw(patterns, datawin, dist=euclidean)        print distance, path        distances.append(distance)    return distancesdistances = get_dtw_in_window(newdatas, pattern)extr = argrelextrema(np.array(distances), np.less)extrvals = extr[0]def fiilter_extr(extrspos, values, threshold=0.8):    filtered = [[values[extrspos[0]], None]]    for i in range(len(extrvals) - 1):        last = filtered[-1][0]        if (values[extrspos[i + 1]] - last >= threshold):            filtered[-1][-1] = values[extrvals[i+1]]            filtered.append([values[extrvals[i+1]], None])    return reduce(lambda res, x: res + x, filtered, [])filteredt = fiilter_extr(extrvals, newdatat)minmaxdist = [[-100, 100]] * len(filteredt)plt.figure()plt.plot(range(len(distances)), distances)#for extr1 in extrvals:#    plt.plot([extr1,extr1], [0, 1000], '-r')plt.grid()plt.figure()newdatasarr = reduce(lambda res, x: res + [newdatat, x], newdatas, [])plt.plot(*newdatasarr)for i in range(len(filteredt)):    plt.plot([filteredt[i],filteredt[i]], minmaxdist[i], '-r')plt.grid()plt.show()raw_input()